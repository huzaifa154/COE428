Summarize your lab:

  Part 1:
     Works  Yes or No: YES!
     
  Part 2:
     Works  Yes or No: YES!
     
  Part 3:
     Works  Yes or No: NOT QUITE
     
***ANSWERS TO QUESTIONS***
 Question 1:
     Which hash table collision resolution method did you use
     (eg. chaining or open addressing)? Explain your choice
     briefly (less than 25 words).
 YOUR ANSWER:
 I was not quite able to figure out part 3 and therefore was not able to use a resolution for hash table collision. But if I were to use one, I'd use open addressing since it seems relatively easier to implement since the key pairs are stored in the hash table and dont have to follow pointers. Open addressing is usually faster with a lower load so therfore my choice would be open addressing. 
 
 
 
 
 Question 2:
       Which hash function (division or multiplication) did you use?
       How did you convert a string into a number?
 YOUR ANSWER:
If I were to complete part 3,I would use division function as division is an easier function to implement compared to multiplication. For division function, we are required to find the remainder of the key divided by the slot value. to convert strings into integers I would need to use ACSII table to convert string to an integers and that can be done by using the function atoi(). 
 
 
 Question 3:
       Another legal XML tag not used in this lab is the
       stand-alone tag.  This kind of tag
       combines both a start-tag and end-tag in one.
       It is identified with a '/' (slash) preceding the
       final >.  (For example, the <foo/>
       is a stand-alone tag that is self balancing.
       
       Describe briefly how
       you would modify Part 3 to allow this kind of tag.
       
 YOUR ANSWER:
 To check for a stand-alone tag we must have an if condition where it will check to see if there is a "/" after the  characters or isalpha. If there is a "/" then it is a stand-alone tag if not it is not a stand-alone tag



  
